{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","actions.js","constant.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","Robots","map","user","i","key","username","SearchBox","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","haserror","this","setState","Component","App","onRequestRobots","SearchField","onSearchChange","isPending","Robotfriend","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.358b122d.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = ({ name, email, id }) => {\r\n    // const { name, email, id }=props;\r\n    return (\r\n        <div className=\"bg-green dib tc pa3 ma3  br3 shadow-3 grow\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?3000*2000`}/>\r\n            <div>\r\n                <h1> {name} </h1>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card ;","import React, {Fragment} from 'react';\r\nimport Card from  './Card';\r\n\r\nconst CardList = ({ Robots })=> {\r\n  return (\r\n    <Fragment>\r\n    {\r\n      Robots.map((user,i) =>{\r\n        return (\r\n            <Card\r\n              key={i}\r\n              id={ Robots[i].id } \r\n              name={ Robots[i].name } \r\n              username={Robots[i].username} \r\n              email={Robots[i].email} \r\n            />\r\n        )\r\n      })\r\n    }\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n// import App from './App';\r\nconst SearchBox=({ SearchChange })=> {\r\n\r\n    return (\r\n        <div >\r\n            <input className='ma3 pa2 br2'\r\n            type='search'\r\n            placeholder='Search Robots'\r\n            onChange ={SearchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div style= {{ overflowY: 'scroll',border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            haserror: false\r\n        }\r\n    }\r\n    componentDidCatch(){\r\n        this.setState({haserror:true })\r\n    }\r\n    render (){\r\n        if (this.state.haserror){\r\n            return <h1>This is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../Components/CardList';\r\n// import {Robots} from './Robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps= state =>{\r\n    return {\r\n        SearchField: state.searchRobots.SearchField, //4) Now we assign SearchField to searchfield which is there in reducers.js   // this furter is used to filter and include with the typed strings. :) done understood compeltely\r\n        isPending  : state.requestRobots.isPending,\r\n        error      : state.requestRobots.error,\r\n        Robots     : state.requestRobots.Robots\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return { //1) This function will bring the value from the DOM body through searchbox.js\r\n            // and will kinda destructre it, it will set the searchfield which is there in the action.js to the typed value (next goto action.js file for comments)\r\n        onSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () =>    dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component{\r\n    // constructor(){\r\n    //     super()\r\n    //     this.state={\r\n    //         Robots:  []\r\n    //     }        // console.log(\"constructor\");\r\n    // }\r\n\r\n    componentDidMount(){\r\n        // console.log(\"sid:\",this.props.store.getState())\r\n        // console.log(\"check\")\r\n        // this.setState({Robots:Robots});\r\n        // console.log (\"componentDidMount\");\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        // .then(response =>response.json())\r\n        // .then(users=> {this.setState({Robots: users})})\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render() {\r\n        // const { Robots } = this.state;\r\n        const { SearchField,onSearchChange,Robots,isPending } = this.props;\r\n        // console.log(\"searchField:\",SearchField);\r\n        const Robotfriend = Robots.filter(robot=>{\r\n            return  robot.name.toLowerCase()\r\n            .includes(SearchField.toLowerCase())\r\n        })\r\n        // console.log(\"RobotFriend:\",RobotFriend);\r\n        return isPending? <h1>Loading</h1>: (\r\n            <div className='tc'>\r\n                <div>\r\n                    <h1 className='heading f1' >Robofriends</h1>\r\n                    <SearchBox SearchChange= {onSearchChange}/>\r\n                </div>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList Robots={ Robotfriend }/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n\r\n/*\r\nExplanation->\r\nWolfgang is right, there is no magic here. To answer your first question, when we add event-listener 'onChange' in searchBox, we tell the browser to keep an eye on input box. The moment we edit the input box (either we add the character or delete the character), browser triggers the 'onSearchChange' function from input object. This function immediately changes the state (searchField) of the App to current string in the input box. Thanks to the setState() method, React now knows that state of the App component has been changed and hence it calls the render method of the same (App) component. Finally in the render method, we filter the robots based on the this.state.searchField (which is now equal to current string in input box). Once the robot list is filtered, App component returns the updated JSX to the index.js and ReactDOM.render renders it on the screen. The moment we make another edit in the search box, this whole cycle repeats again. This is how robot list is filtered as we type.\r\n\r\nOne thing to note here is that if we directly change the state (this.state.searchField = 'Foo') instead of using setState({searchField : 'Foo'}) method, React would have no idea that state has been changed and hence won't call render method of the App. Hence, in this case, actual state would have changed but we won't be able to see it. Hence, use of setState() method to change the state is always highly recommended.\r\n\r\nI would recommend this tutorial here for anyone struggling with state and life-cycle in react.\r\n*/\r\n// addding a line","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constant.js';\r\n\r\nexport const setSearchField =(text)=>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\n// 2) Here the payload changes to whatever we type(got to recucers.js for 3))\r\n\r\nexport const requestRobots=()=> (dispatch)=>{\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response =>response.json())\r\n    .then(  data => dispatch({  type:   REQUEST_ROBOTS_SUCCESS, payload: data   }))\r\n    .catch( err=> dispatch  ({  type:   REQUEST_ROBOTS_FAILED,  payload: err    }))\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD'; // or whatever constant\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED';\r\n","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constant.js';\r\n\r\nconst initialStateSearch = {\r\n    SearchField:''\r\n}\r\n// console.log(SearchField);\r\nexport const searchRobots = (state=initialStateSearch,action={})=>{\r\n    switch(action.type){\r\n        case (CHANGE_SEARCH_FIELD):\r\n            return Object.assign({},state,{ SearchField:action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n// 3) Before we type anything, we keep the action={ initialState} as default\r\n// now think it like a switch button\r\n// whenever the CHANGE_SEARCH_FIELD is assigned its payload to some other text,\r\n// we assign that text to SearchField wihich is present on line 3 above (now goto app.js for 4))\r\n\r\nconst initialStateRobots={\r\n    isPending: false,\r\n    Robots   : []   ,\r\n    error    : ''\r\n}\r\n\r\nexport const requestRobots= (state=initialStateRobots,action={})=>{\r\n    switch(action.type){\r\n        case (REQUEST_ROBOTS_PENDING):  return Object.assign({} ,state,{ isPending: true});\r\n        case (REQUEST_ROBOTS_SUCCESS): return Object.assign({}  ,state,{ Robots:action.payload, isPending: false});\r\n        case (REQUEST_ROBOTS_FAILED)  : return Object.assign({} ,state,{ error :action.payload, isPending: false});\r\n        default: return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import CardList from './CardList'\r\n// import * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './Containers/App';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport { createStore , applyMiddleware, combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'; // this is used middleware for redux async actions\r\n\r\nconst logger= createLogger();\r\nconst rootReducer= combineReducers({ searchRobots, requestRobots});\r\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  //   <App />\r\n  // </React.StrictMode>,2\r\n  // <Fragment>\r\n    // <CardList Robots={Robots}/>,\r\n    // the store is used to display accordingly to the change in teh SearchField\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n// serviceWorker.register()\r\n"],"sourceRoot":""}